{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/brain/aws-interface-for-home-use","result":{"data":{"brainNote":{"slug":"aws-interface-for-home-use","title":"aws-interface-for-home-use","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"aws-interface-for-home-use\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I think I have figured out\\xA0a more reasonable approach to regularly using an EC2 instance than ssh through putty or the browser. The basic thought is to use the instance more like one of the hpc session nodes we have at work.\"), mdx(\"p\", null, \"Big iron, with bigger iron behind it networked slickly together. Accessed over ssh, with tons of networked file storage shared between desktop client and session server. This way, you're spending most of your time working on the client, just saving code and accoutrement to the file share and then building and running it on the server, with outputs written back to the file share for post processing and analysis.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/efs/latest/ug/efs-onpremises.html\"\n  }), \"On Premises Docs\"), \"this shows a way the same may be possible with AWS. I'm concerned with the intricacies of wrtting up what they call a VPC (virtual private cluster, maybe?) which is necessary for this. Then, I have to figure out mounting the storage on the client side. Hopefully, that's easy enough to do on windows.\"), mdx(\"p\", null, \"Then, I don't need to have an instance spun up at all to access the files and work on them, only firing them up when I need big iron. That brings up questions about how to quickly fire up the big iron, but that can wait for another note. I should see about setting this up tomorrow, and get good security on it so its reasonably private. Accessible net storage! Now that I think about it, it could be a great solution for off-site backup.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"aws-interface-for-home-use"}},"staticQueryHashes":[]}