{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/brain/20200619114230-functional-programming","result":{"data":{"brainNote":{"slug":"20200619114230-functional-programming","title":"20200619114230-functional-programming","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"20200619114230-functional-programming\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Functional programming is an interesting paradigm, and one that I've been attracted to (but not very successful in actually using) for quite some time now. As far as I understand it today, the key difference between OOP and FP is one of state: functional programs eschew state, since it leads so often to hard-to-reason about behavior in programs, whereas OOP practically worships state. Functional programs are meant to be seen as pipelines of individual functions applied to a set of input data to achieve some desired set of output data, versus the OOP model of objects abstracting resources, and grouping a given set of data together with methods that work on said data. What remains unclear to me at this point, is how we achieve general interactivity with a functional program. How would we write a GUI, or a webapp, in a functional way? I know it can be done, there are plenty of examples, I just don't yet see how you would achieve it.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"20200702125313-permutations_in_fp.md\"\n  }), \"Permutations in FP\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"20200702124747-the_art_of_functional_programming.md\"\n  }), \"The Art of Functional Programming\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"20200702124533-recursion_in_functional_programming.md\"\n  }), \"Recursion in Functional Programming\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"programming-languages","slug":"programming-languages","childMdx":{"excerpt":"20200619114230-functional_programming \n 20200619114024-clojure"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"20200619114230-functional-programming"}},"staticQueryHashes":[]}