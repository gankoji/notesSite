{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/brain/columnsort","result":{"data":{"brainNote":{"slug":"columnsort","title":"columnsort","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"columnsort\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"ColumnSort\"), mdx(\"p\", null, \"Leighton, Tom, 1985. Tight bounds on the complexity of parallel sorting. IEEE Transactions of Computing C-34, 4 (April), 344-354.\"), mdx(\"p\", null, \"ColumnSort is an oblivious, 8 step sorting algorithm. The input is a dataset which is modeled as an (r,s) sized matrix. r and s are arbitrary, provided they meet the restrictions: r even, r > 2s^2. \"), mdx(\"p\", null, \"Steps 1,3,5,7 are all the same: Take the current s columns, and sort them each individually. \"), mdx(\"p\", null, \"Steps 2 and 4 are inverse transforms of the matrix. Transpose the matrix, and reshape it by wrapping the new rows. \"), mdx(\"p\", null, \"Steps 6 and 8 are also inverses. Swap the top and bottom 'halves' of the matrix, i.e. shift each column downward (upward for step 8) by r/2. \"), mdx(\"p\", null, \"Surprisingly, this incredibly simple procedure is guaranteed to correctly sort the input matrix, provided the inferior sorting algorithm is correct.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"greedsort","slug":"greedsort","childMdx":{"excerpt":"The Actual Algorithm behind the PiSort project See  202008181021 Breaking Down GreedSort  for more details. Here, I want to give a very highâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"columnsort"}},"staticQueryHashes":[]}