{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/brain/data-structures-project","result":{"data":{"brainNote":{"slug":"data-structures-project","title":"data-structures-project","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I've decided on a new project to flex my knowledge a bit: take all the basic, classic data structures (arrays, lists, trees, stacks, queues, etc) and implement my own versions of them across multiple langauges, starting with C. Once I have all the methods down, I'm going to build a benchmarking template that measures how fast or slow each one is in each language.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"Data%20Structures%20List\"\n  }), \"Data Structures List\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"20200706092546-encapsulating_state_vs_fp.md\"\n  }), \"Encapsulating State vs FP\")), mdx(\"p\", null, \"I've decided to pivot a bit, and create the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/brain/python-datastructures\"\n  }), \"Python DataStructures\"), \" version first, as it is the language with which I have the best velocity and can reach a 'done' state fastest. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"current-projects","slug":"current-projects","childMdx":{"excerpt":"Top of the Stack GPGPU Productivity Data Structures Project Sortbenchmark Contest Noting Workflow Time to Spruce Up the Home Network On the…"}},{"title":"project-data-structures","slug":"project-data-structures","childMdx":{"excerpt":"Python DataStructures Data Structures Project Data Structures List"}}],"outboundReferenceNotes":[{"title":"python-datastructures","slug":"python-datastructures","childMdx":{"excerpt":"Same data structures as in  Data Structures List . This is just my progress tracker for the Python implementation.  20200924 - \nArrays…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"data-structures-project"}},"staticQueryHashes":[]}