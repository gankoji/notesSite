{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/notesSite/notes/greedsort","result":{"data":{"brainNote":{"slug":"greedsort","title":"greedsort","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"The Actual Algorithm behind the PiSort project\"), mdx(\"p\", null, \"See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notesSite/notes/202008181021-breaking-down-greedsort\"\n  }), \"202008181021 Breaking Down GreedSort\"), \" for more details. Here, I want to give a very high level overview of the algorithm and process, as a sort of roadmap into the code. \"), mdx(\"p\", null, \"GreedSort is a very effective and fast merge sort variant, designed specifically to tackle the problem of sorting datasets which are much too large to fit into main memory. Given a problem with N records, M records worth of memory, and a disk block size of B records, we do the following: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generate initial runs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"N/M times, read M records B at a time, sort in memory (in place), find pertinent metadata (min key, max key, next block) and store in memory, and then write the block to temp file. \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Merge runs, R = sqrt(M/B)/2 at a time (repeat until only one run remains)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MergeSetup: R times, read the first block of run i from disk, organize metadata (if not already done). \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ApproxMerge: Until we have one complete (approximately sorted) run, do:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find the best two blocks to merge (whichever block in memory has the smallest minimum, and whichever block has the smallest maximum)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read these two best blocks if not already buffered\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mergesort them in place (if they're not the same, otherwise continue!)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write the second buffer (the higher of the records now sorted) back to disk and update metadata\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write the first buffer block to the output file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read the next block from the block that was just written to output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update our metadata and loop. \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CompleteMerge\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once we've finished the above loop, the entire set of blocks has been merged into one longer, approximately merged run. For L = RDB, T = runSize (in records), and t = 0 to ceil(T/L) - 2, do\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/notesSite/notes/columnsort\"\n  }), \"ColumnSort\"), \" algorithm on records tL+1, tL+2, ..., tL + 2L of the output list. \")))))))));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"data-structures","slug":"data-structures","childMdx":{"excerpt":"Project - Data Structures GreedSort"}},{"title":"file-data-structures","slug":"file-data-structures","childMdx":{"excerpt":"The last major piece of the  GreedSort  puzzle that I've yet to solve to satisfaction is that of how to store, pass, and otherwise handle…"}},{"title":"sorting-large-files-with-memory-mapping","slug":"sorting-large-files-with-memory-mapping","childMdx":{"excerpt":"Memory Mapping in C  got this topic started, now it's time to get down to brass tax and sort out the details related to the PiSort program…"}}],"outboundReferenceNotes":[{"title":"202008181021-breaking-down-greedsort","slug":"202008181021-breaking-down-greedsort","childMdx":{"excerpt":"Breaking Down GreedSort GreedSort - Vitter and Nodine 1  - Nodine, Mark H. and Vitter, Jeffrey Scott, \"Greed Sort: Optimal Deterministic…"}},{"title":"columnsort","slug":"columnsort","childMdx":{"excerpt":"ColumnSort Leighton, Tom, 1985. Tight bounds on the complexity of parallel sorting. IEEE Transactions of Computing C-34, 4 (April), 344-35…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"greedsort"}},"staticQueryHashes":[]}