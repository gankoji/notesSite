{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/notes/project-data-structures","result":{"data":{"brainNote":{"slug":"project-data-structures","title":"project-data-structures","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/python-datastructures\"\n  }), \"Python DataStructures\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/data-structures-project\"\n  }), \"Data Structures Project\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/data-structures-list\"\n  }), \"Data Structures List\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"data-structures","slug":"data-structures","childMdx":{"excerpt":"Project - Data Structures GreedSort"}}],"outboundReferenceNotes":[{"title":"python-datastructures","slug":"python-datastructures","childMdx":{"excerpt":"Same data structures as in  Data Structures List . This is just my progress tracker for the Python implementation.  20200924 - \nArrays…"}},{"title":"data-structures-project","slug":"data-structures-project","childMdx":{"excerpt":"I've decided on a new project to flex my knowledge a bit: take all the basic, classic data structures (arrays, lists, trees, stacks, queues…"}},{"title":"data-structures-list","slug":"data-structures-list","childMdx":{"excerpt":"1) Arrays - insert, delete, search \n2) Linked List (Single) - insert, delete, search \n3) Stack: push, pop\n\t1) Bonus points: Min(Max) stack…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"project-data-structures"}},"staticQueryHashes":[]}