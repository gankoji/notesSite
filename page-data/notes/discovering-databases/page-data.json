{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/notes/discovering-databases","result":{"data":{"brainNote":{"slug":"discovering-databases","title":"discovering-databases","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"discovering-databases\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Discovering Databases\"), mdx(\"p\", null, \"Looks like I'm having to delve into the world of data science (well, tbh, I'm already here, I just didn't understand how deep I already was). Looking to implement new tools that change the way we look at things and how we work with massive amounts of data in the engineering and analytic world.\"), mdx(\"p\", null, \"For my current project, I realized that I was starting to design methods and data stores as if they were a database, and that I might be better served actually \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using\"), \" a database engine rather than trying to roll my own from scratch. Sure, there'll be some growing pains as I fit the pieces together, but I think in the long run I'll be better served by the performance and ACID guarantees of something like SQLite. For fun, I found this performance comparison of SQLite and Python's Pandas (from SciPy): \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.thedataincubator.com/2018/05/sqlite-vs-pandas-performance-benchmarks/\"\n  }), \"https://blog.thedataincubator.com/2018/05/sqlite-vs-pandas-performance-benchmarks/\")), mdx(\"p\", null, \"The gist is: there's not much difference in having a SQLite DB on disk vs in memory, and that SQLite absolutely \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"destroys\"), \" pandas in selects and filters. Pandas outperforms on group by's and joins, but not to as big an extent as the other way around for selects and filters. We're talking three orders of magnitude here. Other benchmarks for serialization of Pandas dataframes: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://matthewrocklin.com/blog/work/2015/03/16/Fast-Serialization\"\n  }), \"http://matthewrocklin.com/blog/work/2015/03/16/Fast-Serialization\"), \".\"), mdx(\"p\", null, \"Came across Apache Spark (and, by the by, Hadoop, Hive, and a few others) as well as the concept of Data Lakes and a product called Delta Lake (which says it's \\\"open source\\\" but you have to register to get to it? \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://live-databricks.pantheonsite.io/product/delta-lake-on-databricks\"\n  }), \"https://live-databricks.pantheonsite.io/product/delta-lake-on-databricks\"), \" Idk). Apache Spark: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://spark.apache.org/docs/latest/quick-start.html\"\n  }), \"https://spark.apache.org/docs/latest/quick-start.html\"), \" Spark has a python interface, so it might be interesting and worthwhile to spend a little time learning.\"), mdx(\"p\", null, \"Other cool links: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/jbennetcodes/how-to-use-pandas-to-access-databases-e4e74e6a329e\"\n  }), \"https://medium.com/jbennetcodes/how-to-use-pandas-to-access-databases-e4e74e6a329e\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.dataquest.io/blog/python-pandas-databases/\"\n  }), \"https://www.dataquest.io/blog/python-pandas-databases/\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"current-projects","slug":"current-projects","childMdx":{"excerpt":"Top of the Stack GPGPU Productivity Data Structures Project Sortbenchmark Contest Noting Workflow Time to Spruce Up the Home Network On theâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"discovering-databases"}},"staticQueryHashes":[]}