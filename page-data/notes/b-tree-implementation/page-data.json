{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/notes/b-tree-implementation","result":{"data":{"brainNote":{"slug":"b-tree-implementation","title":"b-tree-implementation","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"b-tree-implementation\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Implementing a B-Tree\"), mdx(\"p\", null, \"OK so the choice of storing data in the leaves or not isn't super important to the b tree. I think the major difficulty in implementing one is that I'm coming at it from an OOP perspective, treating a b-tree as a datatype, when really it's arbitrary data with a few key fields, which have defined operations on them. Let's try thinking it though from that perspective.\"), mdx(\"p\", null, \"It's actually quite difficult to separate the datatype from the operation in the case of the B-Tree. How do you walk a B-Tree without knowing whether it's got children between the keys? What are the basic invariants of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"all\"), \" nodes in B-Trees?\"), mdx(\"p\", null, \"That's actually a good question to get at the heart of the matter here: how do you walk a B-Tree in the first place? What would happen if you did DFS, starting at the root? BFS?\"), mdx(\"p\", null, \"DFS:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Root\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Print/get keys\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add children to stack\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pop stack, repeat until stack is empty\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"b-trees","slug":"b-trees","childMdx":{"excerpt":"B-Trees B-Trees are one of several  File Data Structures   that were originally designed (and still largely used) for the purpose of whatâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"b-tree-implementation"}},"staticQueryHashes":[]}