{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/notes/data-structures-list","result":{"data":{"brainNote":{"slug":"data-structures-list","title":"data-structures-list","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"data-structures-list\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"1) Arrays - insert, delete, search\\n2) Linked List (Single) - insert, delete, search\\n3) Stack: push, pop\\n1) Bonus points: Min(Max) stack, where min val read is O(1)\\n4) Doubly Linked List - insert, delete, search\\n5) Queue - enqueue, dequeue\\n6) Deque - enqueue left, enqueue right, dequeue left, dequeue right\\n7) Bst - insert, search, delete\\n8) Heap- insert, search, delete\\n9) B-tree - insert, search, delete\\n10) Trie (prefix tree) - insert, search, delete\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"project-data-structures","slug":"project-data-structures","childMdx":{"excerpt":"Python DataStructures Data Structures Project Data Structures List"}},{"title":"python-datastructures","slug":"python-datastructures","childMdx":{"excerpt":"Same data structures as in  Data Structures List . This is just my progress tracker for the Python implementation.  20200924 - \nArraysâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"data-structures-list"}},"staticQueryHashes":[]}