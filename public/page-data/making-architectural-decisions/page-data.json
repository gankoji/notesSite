{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\making-architectural-decisions","result":{"data":{"brainNote":{"slug":"making-architectural-decisions","title":"making-architectural-decisions","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cthe-homebackup-project\"\n  }), \"The HomeBackup Project\")), mdx(\"h3\", null, \"Next, the architecture plan:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Think through \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"%5Cclojure-deployment\"\n  }), \"Clojure Deployment\"), \". Figure out a convenient way to get this code up and running on the target machine (the RPi). \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Think through the back half of this. If I get to the point where I've got to go and get all of this data and put it back to where it was, how would I do that? \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"%5Crestoring-a-backup-from-azure\"\n  }), \"Restoring a Backup from Azure\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once we have the above, think through networking and threading \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"%5Cperformance-improvements\"\n  }), \"Performance Improvements\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What about \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"%5Csecrets-management\"\n  }), \"Secrets Management\"), \"? \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also, we need to think through the schema and other data considerations for how we handle \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"%5Cdelta-synchronization\"\n  }), \"Delta Synchronization\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"clojurebackup","slug":"clojurebackup","childMdx":{"excerpt":"Moving the Script to Clojure Why? Well, frankly, because I can and I want to. We have a working-ish python version that's single threaded…"}}],"outboundReferenceNotes":[{"title":"the-homebackup-project","slug":"the-homebackup-project","childMdx":{"excerpt":"Backing Up Critical Data This is an offshoot of my  The Personal DataVault  project, really a first 'research-ish' step along the way to…"}},{"title":"clojure-deployment","slug":"clojure-deployment","childMdx":{"excerpt":"Getting this Code Running RIght now, the way to run this project is simply 'lein run' from the command line. That's not a great experience…"}},{"title":"restoring-a-backup-from-azure","slug":"restoring-a-backup-from-azure","childMdx":{"excerpt":"Getting Data Out of the Cloud Let's run through the wishlist before we hit specifics.  Automated, completely.  Automatic retries, progress…"}},{"title":"performance-improvements","slug":"performance-improvements","childMdx":{"excerpt":"Feature Backlog Batching uploads Chunking files Delta syncs (blob and local) Delta syncs, local and backup history What about a sqlite or…"}},{"title":"secrets-management","slug":"secrets-management","childMdx":{"excerpt":"Having the connection string is convenient, but not very secure. "}},{"title":"delta-synchronization","slug":"delta-synchronization","childMdx":{"excerpt":"Storing Sync Results Do I really need (or even want!?) to use a database or other persistent store to do all of this processing, or do I…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"making-architectural-decisions"}},"staticQueryHashes":[]}