{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\fpga-development-with-aws","result":{"data":{"brainNote":{"slug":"fpga-development-with-aws","title":"fpga-development-with-aws","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"fpga-development-with-aws\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"FPGA Development\"), mdx(\"p\", null, \"Not sure why it took me this long to figure it out, but I've finally (re) discovered a method to do development on FPGAs without breaking the bank: Amazon ec2. I can spin up an instance for $1.65 with an actual fpga, less if I just wanna play with the development tools.\"), mdx(\"p\", null, \"I should come up with something to compute on an fpga, maybe a kalman filter, or an optimizer of some sort. Particle swarm optimization has been done on FPGAs before, maybe I could do something else interesting in optimization. Maybe SCP? Seems pretty difficult. Let's start smaller, maybe matrix multiplication and some other linalg prims, for NumPy acceleration.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.cl.cam.ac.uk/~djg11/kiwi/\"\n  }), \"Kiwi language\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws/aws-fpga\"\n  }), \"Amazon tools\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws.amazon.com/marketplace/pp/B06VVYBLZZ\"\n  }), \"Other Amazon Tools\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://lime.mybluemix.net/mediawiki/articles/t/h/e/The_Liquid_Metal_Alpha_Release.html\"\n  }), \"IBM Liquid Metal\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.fpga4fun.com/QuadratureDecoder.html\"\n  }), \"FPGA4Fun\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://store.digilentinc.com/pynq-z1-python-productivity-for-zynq-7000-arm-fpga-soc/\"\n  }), \"Pynq: python for FPGAs\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"linux-index","slug":"linux-index","childMdx":{"excerpt":"AWS Interface for Home Use \n FPGA Project Ideas \n FPGA Development With AWS"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"fpga-development-with-aws"}},"staticQueryHashes":[]}