{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\data-structures","result":{"data":{"brainNote":{"slug":"data-structures","title":"data-structures","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cproject-data-structures\"\n  }), \"Project - Data Structures\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cgreedsort\"\n  }), \"GreedSort\")), mdx(\"h2\", null, \"Other Data Structures\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cb-trees\"\n  }), \"B-Trees\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200620175608-b-trees\"\n  }), \"20200620175608-b_trees\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200620210305-heaps-data-structure\"\n  }), \"20200620210305-heaps_data_structure\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Clru-cache-problem\"\n  }), \"LRU cache problem\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cminheap\"\n  }), \"MinHeap\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"archived-schtuff","slug":"archived-schtuff","childMdx":{"excerpt":"This is the Boneyard Finishing PiSort \n The Notes Site Lives \n 202008161707 Emacs Lisp Project \n Data Structures \n Managing All My Disks…"}},{"title":"concepts-in-computer-science","slug":"concepts-in-computer-science","childMdx":{"excerpt":"This is a catch-all note for my CS related notes, so I can more easily access them all. This way, they should form one nice, deeply…"}},{"title":"data-scraping-ideas","slug":"data-scraping-ideas","childMdx":{"excerpt":"Discovering Data Had some thoughts today as I was mulling over my little 'walk the tree' project from TrashNukem this week. It occurred to…"}}],"outboundReferenceNotes":[{"title":"project-data-structures","slug":"project-data-structures","childMdx":{"excerpt":"Python DataStructures Data Structures Project Data Structures List"}},{"title":"greedsort","slug":"greedsort","childMdx":{"excerpt":"The Actual Algorithm behind the PiSort project See  202008181021 Breaking Down GreedSort  for more details. Here, I want to give a very high…"}},{"title":"b-trees","slug":"b-trees","childMdx":{"excerpt":"B-Trees B-Trees are one of several  File Data Structures   that were originally designed (and still largely used) for the purpose of what…"}},{"title":"20200620175608-b-trees","slug":"20200620175608-b-trees","childMdx":{"excerpt":"B-Trees are one of several data structures that were originally designed (and\nstill largely used) for the purpose of what Knuth calls…"}},{"title":"20200620210305-heaps-data-structure","slug":"20200620210305-heaps-data-structure","childMdx":{"excerpt":"Heaps Saturday, April 4, 2020 4:14 PM Heaps are a slick way to implement a binary tree without wasting space on pointers. However, their…"}},{"title":"lru-cache-problem","slug":"lru-cache-problem","childMdx":{"excerpt":"An LRU (Least Recently Used) cache does just that: it caches N values of a datastore, and these N are necessarily the N values that have…"}},{"title":"minheap","slug":"minheap","childMdx":{"excerpt":"From Wikipedia, \"A heap is a specialized tree-based data structure which is essentially an almost complete (i.e. full) tree that satisfies…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"data-structures"}},"staticQueryHashes":[]}