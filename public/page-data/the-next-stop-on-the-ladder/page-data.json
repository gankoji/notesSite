{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/the-next-stop-on-the-ladder","result":{"data":{"brainNote":{"slug":"the-next-stop-on-the-ladder","title":"the-next-stop-on-the-ladder","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What to do with all these devices?\"), mdx(\"h3\", null, \"Backup Is Top Priority\"), mdx(\"p\", null, \"No matter what, I need to have some sort of external device to which I can \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"automate\"), \" backups of all devices in the house. Phones, tablets, and computers alike need some sort of easy, automated way to back up important files to a central location, and this central location also needs to have some sort of easy to build capability to back itself and the data it marshalls up, both on prem and in the cloud. \"), mdx(\"h3\", null, \"Enter the Raspberry Pi\"), mdx(\"p\", null, \"I've landed on my Raspberry Pi as a likely candidate, as it can very easily serve file shares and handle data ingestion. There are linux clients for resilio sync (for android backup) and onedrive as well, so I could really just turn the Pi into a NAS that serves files to the whole house network. \"), mdx(\"h3\", null, \"Cloud Storage Comes Along\"), mdx(\"p\", null, \"In addition to just an RPi NAS, it's prudent to have our backups off-site as well. I think the best candidate for this is cheap cloud blob/bucket storage, i.e Azure Block Blobs or AWS S3. Azure is the obvious choice in my particular case, since I have a $150 credit per month that I'm currently not using for much else. \"), mdx(\"h3\", null, \"What About Cloud VMs\"), mdx(\"p\", null, \"Why can't I run \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"all\"), \" of my storage hosting in Azure? Can I fit enough disk and blob space in with that credit? Not just \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" I, but \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"should\"), \" I? I feel like trying to get things like random access to files that are readily being used through the block blob interface would suck donkey balls. Thus, I think the RPi remains the viable alternative at the moment. If we find that we outstrip its capacity, the likely upgrade path is just to build a dedicated file server, which could even be rack mount! Just that thought gets me exicted about running Cat6 through the new house into jack panels in every room, and a nice clean patch panel at the server closet.  \"), mdx(\"h3\", null, \"Server Thoughts\"), mdx(\"p\", null, \"No matter what route we go down, we're going to want high availability and robustness. If the RPi goes down and the network is suddenly degraded, no one is going to be happy that they can't access their files. Think through developing a containerized solution that can be placed on a VMSS in Azure \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"as well as\"), \" the local Pi box, so that we can switch betwen the two on a whim when things get wonky and have redundancy/scalability. \"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/nas-project\"\n  }), \"NAS Project\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"time-to-spruce-up-the-home-network","slug":"time-to-spruce-up-the-home-network","childMdx":{"excerpt":"The Scope Creeps Many moons ago, when I first wrote some basic notes about the kind of network infrastructure I envisioned for the household…"}}],"outboundReferenceNotes":[{"title":"nas-project","slug":"nas-project","childMdx":{"excerpt":"Improving Upon the PiNAS While the current PiNAS is great and has all sorts of cloud interop (and more to come!), it's not perfect. For one…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"the-next-stop-on-the-ladder"}},"staticQueryHashes":[]}