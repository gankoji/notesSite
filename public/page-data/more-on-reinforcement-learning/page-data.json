{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/more-on-reinforcement-learning","result":{"data":{"brainNote":{"slug":"more-on-reinforcement-learning","title":"more-on-reinforcement-learning","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I thought through this quite a bit last night, and I came up with some more questions that I don't necessarily have answers to, at the moment. \"), mdx(\"h3\", null, \"Why Reinforcement Learning?\"), mdx(\"p\", null, \"Is there a reason reinforcement learning would perform better at an optimal design task than unsupervised or supervised techniques would? I think this one is pretty easily answered, because supervised learning is more about backsolving on a training set than generation, and unsupervised learning is more about finding patterns and groupings. \"), mdx(\"p\", null, \"But this leads to the even bigger question:\"), mdx(\"h3\", null, \"Why Learning at All?\"), mdx(\"p\", null, \"What does any form of machine learning offer in this paradigm that more traditional optimization methods don't? Is there some flexibility to be gained? Is it easier for the designer to setup a problem to be run in an RL setting than say \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/202008171306-genetic-algorithms\"\n  }), \"202008171306 Genetic Algorithms\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/202008171309-simulated-annealing\"\n  }), \"202008171309 Simulated Annealing\"), \"?\"), mdx(\"p\", null, \"This one, I don't have a good answer for yet. Why would these optimization techniques be more cumbersome than RL? I've never built and RL system, so I don't fully understand their implementation yet. Time for more reading!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"more-on-why-reinforcement-learning","slug":"more-on-why-reinforcement-learning","childMdx":{"excerpt":"Reinforcement Learning is a great toolset I spent some time sitting down with and getting to know Isak's recommendation: Barto and Sutton's…"}}],"outboundReferenceNotes":[{"title":"202008171306-genetic-algorithms","slug":"202008171306-genetic-algorithms","childMdx":{"excerpt":"Genetic Algorithms are generally classified as one type of optimization solver. The idea is effectively to randomly select starting points…"}},{"title":"202008171309-simulated-annealing","slug":"202008171309-simulated-annealing","childMdx":{"excerpt":"Simulated Annealing is another global optimization strategy, and is actually quite similar to  202008171306 Genetic Algorithms . The core…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"more-on-reinforcement-learning"}},"staticQueryHashes":[]}