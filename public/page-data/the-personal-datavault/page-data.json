{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/the-personal-datavault","result":{"data":{"brainNote":{"slug":"the-personal-datavault","title":"the-personal-datavault","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The Data Problem\"), mdx(\"p\", null, \"I'm sure this is not a new problem in the world of computer science, but it seems to me that 80 years into this ordeal we ought to be quite a bit better at it than we are. Alas, we're not, so here I go into the fray. \"), mdx(\"p\", null, \"Modern personal data usage is massive, and continually increasing with each passing month and year. My own data store is up to something like a handful of terabytes, and I'm less of a digital packrat than most folks. As ingest methods and sensors continue to improve, file sizes continue to grow, and we also tend to keep more data around as storage space continues to grow apace. The big trouble with all of this capability and swathes of data, is that processing it is becoming increasingly difficult. \"), mdx(\"h2\", null, \"Managing Personal Data\"), mdx(\"p\", null, \"One recurring theme in conversations regarding personal data is duplication of files. For any collector of movies, music, books, photos, documents, or anything else of value worth keeping, the complaint I often hear is \\\"I have so many hard drives/folders with so much data in each, but I know for certain that x% of it was duplicated when I copied over to the new hard drive/folder, but I never get around to going back and cleaning it up.\\\" When folders contains tens of items, and data sizes range in the megabytes, this might seem like a reasonably doable task for a saturday afternoon. However, as the number of items grows into the thousands and tens of thousands, or the size of the stores grows above a few gigabytes, the task of manually sifting through troves of data and deduping, organizing, and persisting important personal data becomes all but impossible. So, how can we automate these tasks with software?\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/deduplication\"\n  }), \"Deduplication\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/organization\"\n  }), \"Organization\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/persistence\"\n  }), \"Persistence\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/discoverability\"\n  }), \"Discoverability\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/selective-shareability\"\n  }), \"Selective Shareability\")), mdx(\"h2\", null, \"Market Research\"), mdx(\"p\", null, \"There are a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ton\"), \" of previous attempts at this category, listed here at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/List_of_personal_information_managers\"\n  }), \"Wikipedia\"), \". Most of these I would classify as either email add-ons, calendar programs, notebooks, or wiki managers. There were only two that I found (I did not do an exhaustive search) that were close to what I'm envisioning here were \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.barebones.com/products/yojimbo/\"\n  }), \"Yojimbo for MacOS\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.zootsoftware.com\"\n  }), \"ZOOT\"), \". This brings up the interesting point that I hadn't yet considered, that really to be a full-fledged personal information management app, you have to have the ability to integrate/ingest all forms of data and communication, including things like emails, calendar appointments, and SMS. Not just support them barely in some deep-down plugin list, but full-fledged first class citizen support with sane defaults and trivially easy ingest. Evernote and OneNote are probably the best at this particular aspect, but they lack in other areas. Maybe it's time I crash that market party. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[{"title":"deduplication","slug":"deduplication","childMdx":{"excerpt":"Deduplication Perhaps the most important piece of this project will be the simply stated task of deduplication. Sifting through an entire…"}},{"title":"organization","slug":"organization","childMdx":{"excerpt":"Organizing Personal Data In order to facilitate the organization of personal data, we'll need a rather robust system of metadata editing in…"}},{"title":"persistence","slug":"persistence","childMdx":{"excerpt":"Persistence of Personal Data How do we make sure that we maintain ACID (Atomicity Consitency Isolation Durability)? I'm mostly concerned…"}},{"title":"discoverability","slug":"discoverability","childMdx":{"excerpt":"Discoverability in Large Datasets One of the tragedies of modern computing is that we've amassed  so much freaking data  that most of it…"}},{"title":"selective-shareability","slug":"selective-shareability","childMdx":{"excerpt":"Selectively Shareable Data One of the great struggles of modern personal computing (and hell, even business computing) is sharing data while…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"the-personal-datavault"}},"staticQueryHashes":[]}