{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\20200626090025-innovationnotes-20200626","result":{"data":{"brainNote":{"slug":"20200626090025-innovationnotes-20200626","title":"20200626090025-innovationnotes-20200626","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"20200626090025-innovationnotes-20200626\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What are Innovation Notes?\"), mdx(\"p\", null, \"The idea here is a continuation of one I've had in weeks past: set aside a good chunk of time every week to spend looking forward, rather than focusing on the mistakes of the past or the tedium of the present. This is important both from a work perspective and a personal one, so both are fair game here. This note slip is essentially just my thinking out loud process, written down.\"), mdx(\"h1\", null, \"Setting Direction\"), mdx(\"p\", null, \"This is always the hardest part of any planning session: what are the goals? Do I even have short, mid, and long term goals anymore? I kinda don't want to at this point. I think choosing specifics is arbitrarily limiting. So let's not worry about specific outcomes, and just see where the work takes us.\"), mdx(\"p\", null, \"What's cool this week? Distributed services was a cool thing I got to work on this week, and there's more of that to come. I want to architect a service for automatic garbage collection of our service, which is easily/automatically scalable to the size of the service, on demand. I probably need to get more on this down into a project specific notebook.\"), mdx(\"p\", null, \"What else is cool? I feel that good old fashioned algorithmic and data structure knowledge never goes out of style. I can't seem to get myself motivated to finish volume 2 of TAoCP. I think I'm going to just have to grin and bear it, especially since I'm so close to the end of chapter 3. Only two more sections, granted that's probably something like a hundred pages, but it's doable. After that, it's just a matter of getting through the fourth chapter, and then I'm more or less caught up. Need to do a little re-reading of chapter 7, and then perusing fascicles, but I'll feel much better once I'm to that point.\"), mdx(\"h1\", null, \"Back to Innovation\"), mdx(\"p\", null, \"Okay so I spent all this time thinking and writing, but didn't even write about anything innovative? Let's think about work a bit: what would make our lives easier as a team? I still think that automation is the answer here: we really need to be looking at ways to automate all of the time consuming processes we have at present: onboarding customers (which Joe has a design for), building Teleport (which Meng has worked most of the kinks out of), deploying Teleport and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"testing it\"), \" thoroughly, and solving weird production service issues. We seem to spend an awful lot of time diagnosing, talking about, and halfway solving issues like \\\"the whole pipeline is stalled because of a 12 TB file from one noisy neighbor\\\". Rob, Meng, and Paulette are working on a design specifically for the noisy neighbor problem, but their queue based approach ignores the elephant in the room: why do our systems screech to a halt on large files? What is significant about 1 TB file that makes it so much more difficult to deal with than 100 10GB files? Is it a CDS limitation? Is it something we need to work with them on? This sort of issue, where our entire production flow grinds to a halt because of one file makes this job incredibly stressful and less meaningful than it could be. It should be the priority to fix, IMO.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"archived-schtuff","slug":"archived-schtuff","childMdx":{"excerpt":"This is the Boneyard Finishing PiSort \n The Notes Site Lives \n 202008161707 Emacs Lisp Project \n Data Structures \n Managing All My Disksâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"20200626090025-innovationnotes-20200626"}},"staticQueryHashes":[]}