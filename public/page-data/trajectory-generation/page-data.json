{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\trajectory-generation","result":{"data":{"brainNote":{"slug":"trajectory-generation","title":"trajectory-generation","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The Hard Part of Huge Swarms\"), mdx(\"p\", null, \"Is generating trajectories for each vehicle to follow in near real time. The trouble is, the computational complexity of the trajectory solution problem. In general, you're looking at 12n states, 8-12n controls, and m discretization points over the timeline, along with n! possible constraint combinations for collision avoidance alone, not to mention the additional constraints you might have for station keeping/formation flying, stationary object avoidance (planets, asteroids, stations, etc), and many others. If we wrap up the constraints as l, the optimization problem ends up with exponential complexity as O(lm) \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"per vehicle\"), \", and an overall complexity of O(lmn). \"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This single problem\"), \" is the main deterrent to running bigger swarms than are currently possible with todays' platforms. The biggest swarm I've seen to date is on the order of 10-20 tiny quadrotor vehicles. However, in those demonstrations, I've not seen any indication that their trajectories were being solved for in real time, so it's entirely possible that they've all been precomputed. This brings me back to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Csolution-bases\"\n  }), \"Solution Bases\"), \" and precomputing optimal control problems in a given solution space that's knowable and coverable a priori. Is it possible to do so for as large a space as near-earth space? I think it could be, but the constraints are still super dynamic and probably still really difficult to get right. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"autopilots","slug":"autopilots","childMdx":{"excerpt":"The Boring Part of Space Robots Autopilots are necessary, but so boring to me these days. You can't get anything done if the autopilot isn't…"}},{"title":"what-makes-an-intelligent-swarm","slug":"what-makes-an-intelligent-swarm","childMdx":{"excerpt":"Decomposing the Problem Coming to the specific application of a massive swarm (let's say N=1e5 or 1e6 for this discussion) of robots, maybe…"}}],"outboundReferenceNotes":[{"title":"solution-bases","slug":"solution-bases","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"trajectory-generation"}},"staticQueryHashes":[]}