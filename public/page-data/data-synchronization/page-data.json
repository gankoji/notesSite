{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\data-synchronization","result":{"data":{"brainNote":{"slug":"data-synchronization","title":"data-synchronization","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"data-synchronization\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Synchronizing Disparate Data Sources\"), mdx(\"p\", null, \"This is something that OneDrive, Google Drive, Dropbox, and many others are quite good at. Effectively, they're version control systems, applied to generic file storage rather than source code focus. I bring this up because I have a brand spanking new \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.amazon.com/gp/product/B082YFLLH5/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&psc=1\"\n  }), \"Samsung External Drive\"), \" that I got to partner my (also brand spanking new) \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.apple.com/macbook-air/\"\n  }), \"Apple M1 Macbook Air\"), \". That makes 4 external drives I have now T.T because I'm a genius like that. \"), mdx(\"h2\", null, \"How to manage these devices?\"), mdx(\"p\", null, \"First cut is of course, to get rid of some of them. I don't need 4 external drives, at all. The reason I got the new drive was a) the sweet fingerprint reader for encryption key input, and b) the size. It's freaking tiny! It's wonderful to see how small these things have gotten, especially when we consider that it's a 2 TB SSD, so using it as a normal data drive isn't going to be painful at all. I think I'll keep the 4 TB 'desktop external' as a reasonable local backup and temporary option for os installs and such, and give the 4 TB usb powered one to Nigel once I wipe it. The 1 TB 'portable' can go to Scarlet to pair her laptop. Ok, so now I'm down to just one external drive that I need to carry with me regularly, and need to synchronize regularly. \"), mdx(\"h2\", null, \"Resilio Sync is a great option for this\"), mdx(\"p\", null, \"It works out of the box without too much configuration, and as we've seen over the last few months, it works just fine on the RPi as well. So, is the answer to simply have sync running on the macbook and use it to kick back all of the external drive data to the NAS? Probably. On that note, I should probably think about setting up something like that solution for the kids' computers as well. Now that I think about it, if their code is open source, it's probably a great example of how to pull of microservices without C#!\"), mdx(\"p\", null, \"Sadly, Sync is not open source. However, I was reminded of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nifi.apache.org/download.html\"\n  }), \"Apache NiFi\"), \", which \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is open source\"), \", and is definitely utilizing the microservices pattern in some pieces of the software for its scalability. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"scaling-around-slow-uploads","slug":"scaling-around-slow-uploads","childMdx":{"excerpt":"Upload bandwidth is limited For regularly scheduled  Data Synchronization  with the cloud, the big struggle is our upload speed. I canâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"data-synchronization"}},"staticQueryHashes":[]}