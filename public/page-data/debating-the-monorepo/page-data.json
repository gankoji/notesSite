{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\debating-the-monorepo","result":{"data":{"brainNote":{"slug":"debating-the-monorepo","title":"debating-the-monorepo","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"To monorepo, or kludge\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/actions/checkout\"\n  }), \"actions/checkout: Action for checking out a repo (github.com)\"), \" does not support pulling from a different repo than triggered the action. Thus, if I want this to run under Github, I'm either going to have to push the two repositories together (and of course privatize the code that builds the notesSite), or figure out some way to kludge it together using a docker container. I'm no expert in docker, but putting together a simple linux based container that can pull from two repos and push to the second, with a script or two in between, isn't terribly difficult. The difficult part will be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cmanaging-secrets-in-docker\"\n  }), \"Managing secrets in Docker\"), \", which I have yet to delve into. I'd imagine it can be pretty straightforward, but I'm not sure yet. \"), mdx(\"h2\", null, \"Monorepo\"), mdx(\"p\", null, \"This would be the quickest/easiest way to get this off the ground, and I'm honestly leaning toward it quite heavily. Basically, I copy over the notesSite repo in its entirety to the private repo, modify the copy script a little bit, shape the deploy action definition to include running my scripts and my build, and bam, we're done. \"), mdx(\"p\", null, \"Downside to this is a) abandoning the public notesSite repo, b) dirtying up the private repo. I do think that both points can be ameliorated, to an extent, by submoduling the notesSite repo, but I wonder how that will work out in terms of public-ness. It does look like submoduling doesn't \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"really\"), \" sort out all of the difficulties in secrets management, but it could still be a useful path forward. \"), mdx(\"h3\", null, \"More on Submoduling\"), mdx(\"p\", null, \"Looks like the original way I thought it up might be possible: rather than trying to deal with the hassle of pulling from a private repo and pushing to a public-read/private-write repo, where I need to have secrets for both, I can simply do the clone/submodule --init the other way around: pull the public-read repo (no secret needed), and run those scripts as a part of the pipeline on the private repo. Done. \"), mdx(\"h2\", null, \"Multirepo\"), mdx(\"p\", null, \"Now that I've through through the above, I don't think this strategy has as many benefits as it seemed to a few minutes ago. Even if I keep the repos separate, I still have to deal with the hassle of managing secrets (certificates) for both of them. This is easy enough on my local dev box, but of course secrets management turns into a huge hassle once you move to cloud agents. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"continuous-deployment-for-my-notessite","slug":"continuous-deployment-for-my-notessite","childMdx":{"excerpt":"Automate the Boring Stuff Tonight, I'm looking into ways to automate the publishing of my notes site. As I go over in detail in  The Notesâ€¦"}}],"outboundReferenceNotes":[{"title":"managing-secrets-in-docker","slug":"managing-secrets-in-docker","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"debating-the-monorepo"}},"staticQueryHashes":[]}