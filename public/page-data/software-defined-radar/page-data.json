{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\software-defined-radar","result":{"data":{"brainNote":{"slug":"software-defined-radar","title":"software-defined-radar","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"software-defined-radar\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Software Defined Radar Monday, March 16, 2020 12:16 AM\"), mdx(\"p\", null, \"I've suddenly got an itch to scratch again, which is nice. I want to develop a radar system, mostly from scratch. I think the best platform to start with is a commercially available software defined radio (SDR) module. A good one will have all the requisite analog electronics, a solid ADC/DAC, and preferably a solid MCU and FPGA combo on which to develop firmware.\"), mdx(\"p\", null, \"GNU Radio (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://wiki.gnuradio.org/index.php/Guided_Tutorial_Introduction\"\n  }), \"https://wiki.gnuradio.org/index.php/Guided_Tutorial_Introduction\"), \") seems like a great platform to develop signal processing solutions. I'm not sure that things like doppler processing, beam forming, STAP,\\xA0etc will be doable on that platform, but at least filtering is.\"), mdx(\"p\", null, \"Beamforming and STAP both assume some sort of antenna control. Am I going to end up building an AESA? That seems super difficult. Maybe at least a mechanical rotating antenna is a better choice.\"), mdx(\"p\", null, \"SDR modules to mull over: NooElec SMArt/SMArtee (no TX)\\xA0, HackRF One (no FPGA)\\xA0,\\xA0 limeSDR (no MCU), USRP (very expensive).\"), mdx(\"p\", null, \"Maybe a good solution is to go with a choice like the limeSDR or limeSDR mini, with just an FPGA to do high bandwidth filtering, and passing the data down a chain (maybe to that random ass Artix 7 I have floating around?) and ending up on a workstation pc for target processing and tracking.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"topics-in-mathematics","slug":"topics-in-mathematics","childMdx":{"excerpt":"Another Index Note UofA Applied Math \n Software Defined Radar \n Outline of Measure Theory \n Limit Points \n Closure \n Kalman Filterâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"software-defined-radar"}},"staticQueryHashes":[]}