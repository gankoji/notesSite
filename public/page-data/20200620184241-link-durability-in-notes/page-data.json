{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/20200620184241-link-durability-in-notes","result":{"data":{"brainNote":{"slug":"20200620184241-link-durability-in-notes","title":"20200620184241-link-durability-in-notes","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"20200620184241-link-durability-in-notes\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Link Durability Thursday, June 4, 2020 11:09 AM\"), mdx(\"p\", null, \"How do we solve the question of link durability, but still allow the flexibility that users expect in terms of being able to move files, change titles/tags/fields, etc? Is GUID the answer here? It might be. Immutable GUIDs solve the issue of broken links due to moving/renaming, but they don't solve the issue of deleting items. When deleting items, do we want the system to just remove the old links? Keep them around? Removal seems the best option.\\xA0 A little bit more work on the delete operation, but that's a cost worth paying to keep dead links out of the application.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"20200620184241-link-durability-in-notes"}},"staticQueryHashes":[]}