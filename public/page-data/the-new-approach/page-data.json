{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/the-new-approach","result":{"data":{"brainNote":{"slug":"the-new-approach","title":"the-new-approach","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"the-new-approach\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"The New Approach\"), mdx(\"p\", null, \"One thing that frustrates me to no end is that there are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"so god damn many problems\"), \" in every one of these homeworks. Homework 4 is no exception: there are 17 (multi-part) problems to be completed, each individual part of each question more often than not requiring some bit of code to calculate and/or plot the answer. Thus, these things take a lot of time, and I need to make sure I'm allocating enough time to achieve success. We know from previous homeworks that roughly, each problem should be on the order of about 30 minutes to an hour's worth of work. There are exactly 13 days from today (and all I've done today is read the book) until the homework is due, with 4 of those days being weekends. So, really, I have 8 working days and 4 weekend days to complete this assignment (including the write-up, which takes another hour or two once the code work is complete). 17 problems, roughly 15 or so hours, 8 workdays 4 weekend days. Let's set a simple strategy this time and see how it works out: 1.5 hours per workday, preferably in the afternoon when I've still got some chutzpah left in the tank, and 2-3 hours per weekend day until we finish. That works out to 24 hours total left between now and due date, a good 50% margin on the planned hours. Should do the trick. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"homework-4-chapters-6-and-7","slug":"homework-4-chapters-6-and-7","childMdx":{"excerpt":"Problems from chapter 6: 5(abcd), 6, 7, 8, 9(c), 10(ace), 11, 22\nProblems from chapter 7: 1, 3, 4, 5, 6, 25, 28, 29 Writing Down Problems…"}},{"title":"it-worked","slug":"it-worked","childMdx":{"excerpt":"The New Approach is Good! Whoda thunk? Taking the time to do things properly often works out in your favor! My dad would be chuckling to…"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"the-new-approach"}},"staticQueryHashes":[]}