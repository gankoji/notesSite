{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\delving-into-f","result":{"data":{"brainNote":{"slug":"delving-into-f","title":"delving-into-f","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Microsoft Branded ML!\"), mdx(\"p\", null, \"Is really what they should have called F#, because the syntax and language constructs are so similar to standard ML it's uncanny. I haven't had the chance to take a look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.ocaml.org/learn/\"\n  }), \"Ocaml\"), \", but I would imagine that it would be a very similar experience given its lineage. \"), mdx(\"p\", null, \"Sidenote, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://rosettacode.org/wiki/\"\n  }), \"Rosetta Code\"), \" is far and away one of the best websites I've ever come across, and I'm a little sad it took me this far into my career to discover it! Code examples for tons of problems, across tons of different languages, so that you can compare and contrast them (or just find a snippet for something you need to do). \"), mdx(\"p\", null, \"Anyway, back on topic. I took the dive into F# this weekend, because it's been staring me in the face for so long and I was a little bored/stuck on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cthe-stewart-platform-project\"\n  }), \"The Stewart Platform Project\"), \". So now I'm working through the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fsharpforfunandprofit.com/posts/key-concepts/\"\n  }), \"Why Use F#\"), \" series of blog posts on fsharpforfunandprofit.com, which is both super illuminating and entertaining. \"), mdx(\"p\", null, \"I'm oddly drawn to ML like languages, because I enjoyed the experience of coding in SML this summer so much. However, the experience with the compiler/interpreter (SMLNJ) wasn't that great, so I'm hoping that we've built in some much better support in the CLR. We'll see how it goes!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[{"title":"the-stewart-platform-project","slug":"the-stewart-platform-project","childMdx":{"excerpt":"Going back to my roots Struggled a bit this week (20201231, end of 2020!) to come up with a new project, since  The HomeBackup Project  andâ€¦"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"delving-into-f"}},"staticQueryHashes":[]}