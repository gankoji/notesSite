{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\rsyncs-delta-calculation","result":{"data":{"brainNote":{"slug":"rsyncs-delta-calculation","title":"rsyncs-delta-calculation","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"rsyncs-delta-calculation\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Old Faithful\"), mdx(\"p\", null, \"Rsync is a really sick little tool. It effectively synchronizes file trees between disparate locations, and does so in a very network efficient way. The process is broken down in quite significant detail in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rsync.samba.org/how-rsync-works.html\"\n  }), \"How Rsync Works (samba.org)\"), \". Basically, its a lot of generating file lists with metadata and checksums, then performing rolling checksums on files that need to be synced, with a really slick algorithm that sends information on how to rebuild the file with every transfer, making the sync process invariant to data rearrangement within files! \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"delta-synchronization","slug":"delta-synchronization","childMdx":{"excerpt":"Storing Sync Results Do I really need (or even want!?) to use a database or other persistent store to do all of this processing, or do Iâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"rsyncs-delta-calculation"}},"staticQueryHashes":[]}