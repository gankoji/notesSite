{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\version-control-plan","result":{"data":{"brainNote":{"slug":"version-control-plan","title":"version-control-plan","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"version-control-plan\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The How-To of Note-Fu\"), mdx(\"p\", null, \"Sometimes I write myself goofy notes like this, just to flex my pun muscles. \"), mdx(\"p\", null, \"Okay, but on to the serious topic here. What do I want to achieve by version controlling my notes? One major obvious benefit would be the ability to simply roll back my notes to a previous version, so that way if I somehow accidentally delete a note file (or OneDrive does it for me, those bastards...), I can recover it. I'll have to get a little better at git in order to be able to do that without nuking whatever notes I've written that day/hour/commit period. \"), mdx(\"p\", null, \"I also get branching, which I don't really see as useful in the context of note taking, but you never know what you might find useful in the future. \"), mdx(\"p\", null, \"Another benefit is that I'll hopefully I'll be able to integrate these notes with an android app that is knowledgeable of git, and then I finally get first party mobile access to my notes. That would be a bit of a game changer for me. \"), mdx(\"p\", null, \"The other benefit that's immediately obvious is the ability to synchronize notes across devices and platforms, using a cloud repo provider like GitHub and GitLab. The trouble with this is, that the way git is designed, you only get this synchronization whenever you manually do it. More bullet proof than OneDrive's unpredictable syncing, but less useful if you're forgetful like me. \"), mdx(\"h2\", null, \"An Interesting Sidebar: Automating Commits and Pushes\"), mdx(\"p\", null, \"So is there a convenient way to automate staging, commiting, and pushing my latest note changes to my cloud repo? I'm sure I could bash script it, but then I'd have to write multiple versions of that script for each different platform I use (or fall back to Msys2 on windoze, but then you have to worry about getting it to run automatically, which it doesn't like). \"), mdx(\"p\", null, \"After a little googling, it doesn't look like automatically running a git commit at specified time intervals is a very popular thing to do or to ask about, so I'm on my own at least for that one. \"), mdx(\"p\", null, \"Obsidian themselves have options to do this sort of thing for you via 'Obsidian Sync'. They also have an option to publish your notes to a website. These both are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"obscenely expensive\"), \", compared to the cost of the app itself, which seems a little crazy to me. The app is $50/yr for a commercial license, which I've already paid for. Sync is $48/yr, and publish is $96/yr, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"in addition to that commercial license\"), \". I find this to be unacceptable, so I won't explore it further. It's a little disappointing that at least one of these doesn't come included with the commercial license, although I wonder if they'll look to do so in the future. \"), mdx(\"h2\", null, \"So what really are the options here?\"), mdx(\"p\", null, \"1) Continue using OneDrive.\\n1) Use it as is.\\n2) Use git with OneDrive as the sync backend, affecting a 'local only' git repo in the cloud folder. Has auto-sync as a benefit. Still needs frequent commits in order to realize the versioning/rollback protection benefits, and I can see that being a false sense of security given my propensity to forget to do stuff like that.\\n2) Use GitLab. Needs automation for staging, committing, and pushing, and that automation will need to be developed, debugged, and supported for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"every device I use\"), \". \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"continuous-deployment-for-my-notessite","slug":"continuous-deployment-for-my-notessite","childMdx":{"excerpt":"Automate the Boring Stuff Tonight, I'm looking into ways to automate the publishing of my notes site. As I go over in detail in  The Notes…"}},{"title":"version-controlling-notes","slug":"version-controlling-notes","childMdx":{"excerpt":"Important data should be recoverable! And that is one of the primary raisons d'etre of the modern, decentralized version control system! Of…"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"version-control-plan"}},"staticQueryHashes":[]}