{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/lets-talk-swarms","result":{"data":{"brainNote":{"slug":"lets-talk-swarms","title":"lets-talk-swarms","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Swarm Orchestration\"), mdx(\"p\", null, \"Saw a pretty good talk today in 696G on coordinated control in multi-vehicle problems. The talk itself wasn't terribly interesting or groundbreaking, but it got me thinking a good bit about this potential research topic I've landed myself lately, namely orchestration of large scale swarms in a near-earth environment. First, a recap of the talk today. \"), mdx(\"h2\", null, \"Time Coordination Control in Swarms\"), mdx(\"p\", null, \"After spending the effort to calculate optimal trajectories in multi-agent problems via transcription, collocation, and smooth (Bezier) polynomial optimization methods, the next step is to figure out how to coordinate their following of those paths so taht we can get them to do things like arrive at a given set of coordinates simultaneously, or sequentially auto-land at an airstrip, etc. The key insight is very similar to something I came up with about a year ago in regards to path planning: parameterizing the optimally generated path according to time. The second step, and key takeaway from his talk, was that you can treat this parameter as a controlled quantity (he called it 'virtual time'), wherein you create another feedback loop around this virtual time between the agents, and adjust each individual based upon its relative virtual time state to the others. The difficulty in this, and one detail that I don't think he actually mentioned in the talk, is that the outer feedback loop requires some control input that can affect the virtual time parameter, which isn't particularly obvious how to achieve. \"), mdx(\"h2\", null, \"How Does this Apply to Swarms?\"), mdx(\"p\", null, \"Well, the immediate application is obvious. Two UAVs counts as a 'swarm', I guess, and well the two vehicle problem generalizes pretty trivially to the N vehicle problem. That said, this type of enabling technology can find pretty widespread application to swarm orchestration in any environment, let alone space. It is, effectively, one less problem that we have to deal with. If I can get this technology to work in my own implementations, then I don't have to solve it on my own, and can focus more on the fun parts, like path generation, task prioritization, mission planning, etc. \"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/what-makes-an-intelligent-swarm\"\n  }), \"What Makes an Intelligent Swarm\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"self-replicating-manufacturing-in-space","slug":"self-replicating-manufacturing-in-space","childMdx":{"excerpt":"This was such a good idea I really had to get it down into the slipbox. Look up Metzger's paper on an Off-Earth Supply Chain for reference…"}}],"outboundReferenceNotes":[{"title":"what-makes-an-intelligent-swarm","slug":"what-makes-an-intelligent-swarm","childMdx":{"excerpt":"Decomposing the Problem Coming to the specific application of a massive swarm (let's say N=1e5 or 1e6 for this discussion) of robots, maybe…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"lets-talk-swarms"}},"staticQueryHashes":[]}