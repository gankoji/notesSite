{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\microservices","result":{"data":{"brainNote":{"slug":"microservices","title":"microservices","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Microservices\"), mdx(\"p\", null, \"Are a relatively simple concept, but a little bit more subtle in their execution. Effectively, the idea is directly opposite monolithic software: rather than a large application which has many different capabilities and responsibilities, tightly coupled and generally difficult to maintain, we take those capabilities and responsibilities and separate them out across multiple programs, with some sort of communciation mechanism between them. \"), mdx(\"p\", null, \"The subtlety in implementation comes in the communication between the services. There are a multitude of options, from shared memory to IPC to network calls, and they all get significantly more difficult to manage and handle as we consider the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"real\"), \" benefit of microservices: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Chorizontal-scaling-with-microservices\"\n  }), \"Horizontal Scaling with Microservices\"), \". \"), mdx(\"p\", null, \"Also, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://techbeacon.com/app-dev-testing/9-best-open-source-options-building-microservice-apps\"\n  }), \"this article from TechBeacon.com\"), \" for various open source technologies to use in building microservices. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"considering-microservices","slug":"considering-microservices","childMdx":{"excerpt":"20201212- Considering Microservices There are a lot of rough edges on my current implemenation of this capability. It's script basedâ€¦"}}],"outboundReferenceNotes":[{"title":"horizontal-scaling-with-microservices","slug":"horizontal-scaling-with-microservices","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"microservices"}},"staticQueryHashes":[]}