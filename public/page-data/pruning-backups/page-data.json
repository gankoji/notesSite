{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\pruning-backups","result":{"data":{"brainNote":{"slug":"pruning-backups","title":"pruning-backups","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Actually an Interesting Project!\"), mdx(\"p\", null, \"This project, while really (hopefully) only a one-time ordeal, is an ideal jumping off point for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cthe-personal-datavault\"\n  }), \"The Personal DataVault\"), \". The basic idea here is to comb through my current datastores, building up a set of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"unique\"), \" files, and then transferring just those unique files into a new datastore with mostly the same structure as the previous, nuking the old after we verify we're not going to lose any actual data. Sounds simple on the surface, right? \"), mdx(\"p\", null, \"However, the complicating factor here is that there are multiple copies of all this data, in disparate locations across devices, and at the moment I don't really have a good 'source of truth' for most of it (i.e. I don't remember which 'set' of each part of the data as a whole is the most recent/up to date/\\\"good\\\" version). \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"a-moot-point","slug":"a-moot-point","childMdx":{"excerpt":"Well, this is interesting and all, but I just came to the realization that you can now specify 'cool' storage for file shares in Azure…"}},{"title":"archived-schtuff","slug":"archived-schtuff","childMdx":{"excerpt":"This is the Boneyard Finishing PiSort \n The Notes Site Lives \n 202008161707 Emacs Lisp Project \n Data Structures \n Managing All My Disks…"}}],"outboundReferenceNotes":[{"title":"the-personal-datavault","slug":"the-personal-datavault","childMdx":{"excerpt":"The Data Problem I'm sure this is not a new problem in the world of computer science, but it seems to me that 80 years into this ordeal we…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"pruning-backups"}},"staticQueryHashes":[]}