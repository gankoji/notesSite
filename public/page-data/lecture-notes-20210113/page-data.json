{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\lecture-notes-20210113","result":{"data":{"brainNote":{"slug":"lecture-notes-20210113","title":"lecture-notes-20210113","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"lecture-notes-20210113\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Notes 20210113\"), mdx(\"h2\", null, \"Administrative Notes\"), mdx(\"p\", null, \"There is a course OneNote notebook, which surprisingly has sections for student notes as well as Shankar's lecture notes. Thus, I don't have to spend too much time regurgitating lecture material in here, and can focus on my thoughts. \"), mdx(\"p\", null, \"Office hours are posted in the syllabus handout, as well as some other administrtiva. First homework won't be due until the end of the month, so we have a few weeks to look at it. \"), mdx(\"h2\", null, \"Convexity\"), mdx(\"p\", null, \"We start the semester with a lecture on convexity. Interesting note that there is always a set of hyperplanes, defined by simple relations on the orginal convex set, that bound the set when taken together. \"), mdx(\"p\", null, \"Conjugate variables are mentioned here, but I didn't catch where they were defined. However, we can make a function from these conjugates, and it effectively is the slope of the original convex function. This is the 'duality' in convex theory that leads so nicely to its properites in optimization. \"), mdx(\"h3\", null, \"Sneaky Proof Technique\"), mdx(\"p\", null, \"Proving a = b is done as both a<= b and b <= a. We get one of these for free with convex functions, when consdering the optimal value. \"), mdx(\"h2\", null, \"Convex Optimization\"), mdx(\"p\", null, \"We get a basic rundown of the classic optimization problem formulation. If all of the inequality constraints (and objective function) are convex, and the equality constraints affine, this optimization problem is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"convex\"), \", which is a very handy property to have, as it allows us to solve the problem in about the same time complexity as a similarly sized linear programming problem. \"), mdx(\"p\", null, \"We note that the equality constraints being affine (e.g. 'linear' in higher order spaces) comes from needing to be convex both for h(x) = 0 \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"and\"), \" -h(x) = 0. The only functions for which both of those equalities hold are affine, which in the notes we write henceforth as $h_j(x) = a_j^Tx - b_j$. \"), mdx(\"h2\", null, \"Feasibility\"), mdx(\"p\", null, \"I like this definition, its compact, so I want to write it down. The feasible set of an optimization problem is \"), mdx(\"p\", null, \"$D = dom(f_0) \\\\cap \", \"{\", \"x| f_i(x) \\\\leq 0\", \"}\", \" \\\\cap \", \"{\", \"h_j(x) = 0\", \"}\", \"$\"), mdx(\"p\", null, \"For a convex optimization problem, this set is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"always convex\"), \", but it is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not guaranteed to be nonempty\"), \".  If $D = \\\\emptyset$, then $p = + \\\\infty$. \"), mdx(\"h2\", null, \"Optimality\"), mdx(\"p\", null, \"When we have a tangent plane, we can write the optimality condition as $\\\\nabla f_0 = \\\\lambda \\\\hat{n}$.  This depends on smoothness, of course, for the existence of the tangent plane. This condition is equivalent to the Karush-Kuhn-Tucker conditions, and combined with $\\\\nabla f_0(x)^T(y-x) \\\\geq 0$ for all $y \\\\in D$, is necessary \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"and\"), \" sufficient for an optimum solution. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"lecture-notes-20210113"}},"staticQueryHashes":[]}