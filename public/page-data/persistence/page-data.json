{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\persistence","result":{"data":{"brainNote":{"slug":"persistence","title":"persistence","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"persistence\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Persistence of Personal Data\"), mdx(\"p\", null, \"How do we make sure that we maintain ACID (Atomicity Consitency Isolation Durability)? I'm mostly concerned with the Durability part at first, although considering multiple users/services/accessors simultaneously brings on the other three concerns. \"), mdx(\"h3\", null, \"Durability\"), mdx(\"p\", null, \"Durability of personal data is of critical importance in this application, and really across all applications today. When a user hands us a personal file, say a photo of her family at a specific gathering, she expects that said file will be available to her at any point in the future. There's tons of interesting work to go into here, especially when you consider the coupling between replication and caching, integrity hashes, RAIDs and multiple data stores. I don't have any good overarching design ideas at the moment, but this must be concern #1 for the datastore portion of the project. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"the-personal-datavault","slug":"the-personal-datavault","childMdx":{"excerpt":"The Data Problem I'm sure this is not a new problem in the world of computer science, but it seems to me that 80 years into this ordeal weâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"persistence"}},"staticQueryHashes":[]}