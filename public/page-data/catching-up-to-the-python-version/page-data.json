{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\catching-up-to-the-python-version","result":{"data":{"brainNote":{"slug":"catching-up-to-the-python-version","title":"catching-up-to-the-python-version","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"catching-up-to-the-python-version\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Creating the TODO list\"), mdx(\"p\", null, \"Let's make this as simple as possible, by starting small and working our way up. \"), mdx(\"h3\", null, \"First, the code plan:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Function to compress a file (gzip)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Function to decompress a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Function to tarball a whole directory? \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Need some architectural decision making. Are tarballs really the best way to go here, especially when I was talking about all that manifest and delta sync stuff? \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Are \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"manifests\"), \" the best way to go with delta sync anyway? Is there a way to fit some event driven architecture in here? Ultimately, we want this to be a set of super small microservices that constantly back stuff up to various endpoints. Is it a good idea to do it this way from the get go when moving to a new lanugage? Probably not. \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Function to upload a file to Azure Blob Storage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Functions for dealing with Azure\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Get service client\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Get container client\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Upload blob\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Download blob\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DONE Check if blob was uploaded\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clean up files post upload\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"clojurebackup","slug":"clojurebackup","childMdx":{"excerpt":"Moving the Script to Clojure Why? Well, frankly, because I can and I want to. We have a working-ish python version that's single threadedâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"catching-up-to-the-python-version"}},"staticQueryHashes":[]}