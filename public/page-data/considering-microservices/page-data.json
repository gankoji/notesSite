{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\considering-microservices","result":{"data":{"brainNote":{"slug":"considering-microservices","title":"considering-microservices","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"20201212- Considering Microservices\"), mdx(\"p\", null, \"There are a lot of rough edges on my current implemenation of this capability. It's script based (meaning manually run, although \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"theoretically\"), \" possible to automate with cron or systemd), has to have its input split (currently manual), and the reconstruction is basically unthought through at this point. When I consider just how complex the network upload side of this can end up being (tuning chunk size, resumability, etc), it gives me a little anxiety for just how quickly the complexity of this project can spiral out of control. A classic pattern for managing complexity in an app with clearly defined responsibilities for separate portions and a high availability requirement, is to split the capability over smaller \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cmicroservices\"\n  }), \"Microservices\"), \". Do I \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"really\"), \" have a high availability requirement? Not really, but it would be super cool to at least break this up into multiple smaller pieces, and it represents a good opportunity for me to flex my newly grown muscles in this area of development. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"the-homebackup-project","slug":"the-homebackup-project","childMdx":{"excerpt":"Backing Up Critical Data This is an offshoot of my  The Personal DataVault  project, really a first 'research-ish' step along the way to…"}}],"outboundReferenceNotes":[{"title":"microservices","slug":"microservices","childMdx":{"excerpt":"Microservices Are a relatively simple concept, but a little bit more subtle in their execution. Effectively, the idea is directly opposite…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"considering-microservices"}},"staticQueryHashes":[]}