{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\what-makes-an-intelligent-swarm","result":{"data":{"brainNote":{"slug":"what-makes-an-intelligent-swarm","title":"what-makes-an-intelligent-swarm","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Decomposing the Problem\"), mdx(\"p\", null, \"Coming to the specific application of a massive swarm (let's say N=1e5 or 1e6 for this discussion) of robots, maybe of different types/capabilities, in a near-earth environment. What would autonomous conrol and orchestration of these vehicles look like?\"), mdx(\"p\", null, \"We'd need to have automatic control and path following, obviously (e.g. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cautopilots\"\n  }), \"Autopilots\"), \"). Those are a separate design problem, but could be fun as an exercise to extend the length of a dissertation, if necessary. We'd need \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Ctrajectory-generation\"\n  }), \"Trajectory Generation\"), \", and this is likely where the problem gets \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"really freaking hard\"), \" with 1e5 (hell, even 10!) agents. Computability of solutions for this many agents may well be my major contribution to the field, tbh.  Then, we need 'mission control'. Goal-oriented, WTA (for lack of a better term) type stuff. I think I'm going to instead call this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Ctask-assignment\"\n  }), \"Task Assignment\"), \" for now. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"real\"), \" trick here is going to be achieving these goals, which in themselves are absolute units in terms of computational complexity, in a distributed/decentralized/robust-to-unit-failure capacity. \"), mdx(\"p\", null, \"These are probably the fundamental 'achieve the mission' type goals for a completely autonomous swarm, with intermittent supervision to update goals. However, they don't address the problem of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cmaintaining-a-swarm-in-space\"\n  }), \"Maintaining a Swarm in Space\"), \", where replication, critical mass, and long-term expansion are the key goals as outlined in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cself-replicating-manufacturing-in-space\"\n  }), \"Self-Replicating Manufacturing in Space\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"lets-talk-swarms","slug":"lets-talk-swarms","childMdx":{"excerpt":"Swarm Orchestration Saw a pretty good talk today in 696G on coordinated control in multi-vehicle problems. The talk itself wasn't terribly…"}}],"outboundReferenceNotes":[{"title":"autopilots","slug":"autopilots","childMdx":{"excerpt":"The Boring Part of Space Robots Autopilots are necessary, but so boring to me these days. You can't get anything done if the autopilot isn't…"}},{"title":"trajectory-generation","slug":"trajectory-generation","childMdx":{"excerpt":"The Hard Part of Huge Swarms Is generating trajectories for each vehicle to follow in near real time. The trouble is, the computational…"}},{"title":"approximate-gradients","slug":"task-assignment","childMdx":{"excerpt":"TK"}},{"title":"maintaining-a-swarm-in-space","slug":"maintaining-a-swarm-in-space","childMdx":{"excerpt":"A Swarm in Space This is probably the most interesting part of the space microbot project. How do you keep them all running smoothly? What…"}},{"title":"self-replicating-manufacturing-in-space","slug":"self-replicating-manufacturing-in-space","childMdx":{"excerpt":"This was such a good idea I really had to get it down into the slipbox. Look up Metzger's paper on an Off-Earth Supply Chain for reference…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"what-makes-an-intelligent-swarm"}},"staticQueryHashes":[]}