{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/ios-bootcamp","result":{"data":{"brainNote":{"slug":"ios-bootcamp","title":"ios-bootcamp","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ios-bootcamp\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Developing for iPhones\"), mdx(\"p\", null, \"Is actually pretty straightforward. I've been spending a little bit of time here and there trying to get up to speed on the Swift language, so that I can dive right in to writing things in a native way. That said, I've sort of been spinning my wheels, because the content of 'swift fundamentals' overlaps so damn heavily with literally every other language out there, that it's hard for me to get motivated about it. Thus, I'm working through the 10-day iOS bootcamp course from O'Reilly that will show me this stuff in roughly 10 hours of video content, in a much more digestible format than the texts that try to get every concept right down to the language lawyer level. \"), mdx(\"h2\", null, \"Alas, Too Excited Too Soon\"), mdx(\"p\", null, \"Sadly, it looks like this video tutorial set is too old to be of any use to me. It's based on 2018 swift, to which there apparently have been quite a few major breaking changes in the meantime. Most importantly, all of his tutorials are based on a project that uses UIKit, whereas XCode default projects now give you SwiftUI. This is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"supposed\"), \" to be an awesome improvement, so I want to learn the new one rather than the old, but of course that makes this entire tutorial pretty useless. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"ios-bootcamp"}},"staticQueryHashes":[]}