{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\performance-improvements","result":{"data":{"brainNote":{"slug":"performance-improvements","title":"performance-improvements","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"performance-improvements\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Feature Backlog\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Batching uploads\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chunking files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delta syncs (blob and local)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delta syncs, local and backup history\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What about a sqlite or datomic or other persistent store for file hash and metadata to tell what's been backed up lately? MAN THATS A SWEET IDEA\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Encrypting data before flight, decrypting on landing. \")), mdx(\"h2\", null, \"Other Thoughts\"), mdx(\"p\", null, \"Is there an effective way to utilize already existing utilities to do some of this work? Rsync in particular seems super useful, but can I get it to integrate well with Azure? \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"making-architectural-decisions","slug":"making-architectural-decisions","childMdx":{"excerpt":"The HomeBackup Project Next, the architecture plan: Think through  Clojure Deployment . Figure out a convenient way to get this code up andâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"performance-improvements"}},"staticQueryHashes":[]}