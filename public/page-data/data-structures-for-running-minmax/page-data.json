{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\data-structures-for-running-minmax","result":{"data":{"brainNote":{"slug":"data-structures-for-running-minmax","title":"data-structures-for-running-minmax","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Here, we consider the implementation of a queue like structure for maintaining the minimum of a set of values. This topic is also applicable to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Clru-cache-problem\"\n  }), \"LRU cache problem\"), \". Our problem is simple. Given N items, we want to successively determine which of them is the minimum at any given call in to the object/structure. What sort of data structure (and algorithms necessary to maintain that structure) is the best choice?\"), mdx(\"p\", null, \"Arrays would be O(n) lookup, O(log n) insertion/deletion\\nLinkedLists would also be O(n) lookup, but O(n) deletion and O(1) insertion\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cminheap\"\n  }), \"MinHeap\"), \", or BST, is likely the right answer here. O(n) creation, O(log n) deletion, O(1) lookup. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[{"title":"lru-cache-problem","slug":"lru-cache-problem","childMdx":{"excerpt":"An LRU (Least Recently Used) cache does just that: it caches N values of a datastore, and these N are necessarily the N values that have…"}},{"title":"minheap","slug":"minheap","childMdx":{"excerpt":"From Wikipedia, \"A heap is a specialized tree-based data structure which is essentially an almost complete (i.e. full) tree that satisfies…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"data-structures-for-running-minmax"}},"staticQueryHashes":[]}