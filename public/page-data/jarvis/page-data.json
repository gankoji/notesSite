{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\jarvis","result":{"data":{"brainNote":{"slug":"jarvis","title":"jarvis","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I think this is my most important idea to date, and the most promising project as well. I originally started the inklings of this project in Python, but these days I'm leaning toward something a little easier to distribute, and a little more heavy duty, like C# or Java. Will be an interesting comparison between the two/three.\"), mdx(\"p\", null, \"The point of this project is to create a program that acts as a research assistant: it automatically manages a large collection/library of books, journal articles, web pages, and other types of media, scraping them for their relevant data, performing basic NLP on said data, and organizing the media according to strength of association within the metadata generated by the NLP. This not only has rammifications for personal information management, (which is the immediate goal), but when combined with external sources for information, can further scrape those sources to continually add to the current knowledge base. That's a little further down the line, however, and for now I'd like to really focus on the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"automated tagging and association\"), \" processes, along with basic data mining/crawling/trolling capabilities. I think that the automation of PIM is maybe the single biggest upside of this project, should it get off the ground.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Ctowards-an-ai-assistant\"\n  }), \"Towards an AI Assistant\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"dissertation-topic-ideas","slug":"dissertation-topic-ideas","childMdx":{"excerpt":"Seems I never got around to doing anything here. Obviously, I need to start fleshing out a list of ideas for the dissertation. Jarvis  is…"}}],"outboundReferenceNotes":[{"title":"towards-an-ai-assistant","slug":"towards-an-ai-assistant","childMdx":{"excerpt":"Let's start small. Architect the assistant and split it off into pieces that can be worked. One thing that just occurred to me: hasn't a lot…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"jarvis"}},"staticQueryHashes":[]}