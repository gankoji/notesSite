{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\greedsort-metadata","result":{"data":{"brainNote":{"slug":"greedsort-metadata","title":"greedsort-metadata","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"greedsort-metadata\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What about all that auxiliary data?\"), mdx(\"p\", null, \"GreedSort focuses its memory requirements mostly on the M records worth of memory we'll need for each thread. However, there's actually a good bit more that's needed!\"), mdx(\"p\", null, \"We need three two dimensional arrays for storing the key metadata of the algorithm: next, biggest, smallest. These have their values set at the beginning of each new Merge iteration: next\", \"[i,j]\", \" = 1, biggest\", \"[i,j]\", \" = max(b1\", \"[j]\", \"), smallest\", \"[i,j]\", \" = min(b\", \"[j]\", \"). They are changed throughout the merge process. These have size (R,D)x sizeof(recordKey). There are two additional arrays: b1 and b2, the arrays of actual buffers for data read from and written to disk. These are single dimension arrays of D elements, and each element is B records long. \"), mdx(\"p\", null, \"Ignoring some of the details, like filename buffers, loop counters, etc, we actually have a reasonable bound on our auxiliary memory usage: 3x ((R,D) x sizeof(recordKey)) + 2x ((D) x B). For the sorting competition, we know the records are 100 bytes in length. We also have some idea for the number of disks, disk block size, and what R will look like. \"), mdx(\"p\", null, \"D = 1 (for Pi, no use in having multiples yet)\\nB = 300k/100 = 3k records, 300k bytes (alternatively, 4M)\\nR = 8 (4M Blk), 28 (300k Blk)\"), mdx(\"p\", null, \"So our total aux mem consumption is looking like either 2400 + 8M bytes or 8400 + 600k bytes, i.e. 8 MB or 600k. Interesting that the smaller block size here leads to better aux mem usage and higher truncation/logarithmic factor in the merges, whereas higher block size generally leads to better saturation of the IO bus. It will be a fun comparison to see how tweaking that particular value impacts the overall performance of the system. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"sorting-large-files-with-memory-mapping","slug":"sorting-large-files-with-memory-mapping","childMdx":{"excerpt":"Memory Mapping in C  got this topic started, now it's time to get down to brass tax and sort out the details related to the PiSort programâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"greedsort-metadata"}},"staticQueryHashes":[]}