{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\20200619114230-functional-programming","result":{"data":{"brainNote":{"slug":"20200619114230-functional-programming","title":"20200619114230-functional-programming","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Functional programming is an interesting paradigm, and one that I've been attracted to (but not very successful in actually using) for quite some time now. As far as I understand it today, the key difference between OOP and FP is one of state: functional programs eschew state, since it leads so often to hard-to-reason about behavior in programs, whereas OOP practically worships state. Functional programs are meant to be seen as pipelines of individual functions applied to a set of input data to achieve some desired set of output data, versus the OOP model of objects abstracting resources, and grouping a given set of data together with methods that work on said data. What remains unclear to me at this point, is how we achieve general interactivity with a functional program. How would we write a GUI, or a webapp, in a functional way? I know it can be done, there are plenty of examples, I just don't yet see how you would achieve it.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200702125313-permutations-in-fp\"\n  }), \"20200702125313-permutations_in_fp\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200702124533-recursion-in-functional-programming\"\n  }), \"20200702124533-recursion_in_functional_programming\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200706092546-encapsulating-state-vs-fp\"\n  }), \"20200706092546-encapsulating_state_vs_fp\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200702124747-the-art-of-functional-programming\"\n  }), \"20200702124747-the_art_of_functional_programming\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200702125803-permutations-of-two-collections\"\n  }), \"20200702125803-permutations_of_two_collections\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200804131752-programming-languages-coursera\"\n  }), \"20200804131752-programming_languages_coursera\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5C20200730152314-plb-hw5-muplinterpreter\"\n  }), \"20200730152314-plb_hw5_muplinterpreter\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"programming-languages","slug":"programming-languages","childMdx":{"excerpt":"20200619114230-functional_programming \n 20200619114024-clojure \n Uncle Bob's Pair Programming Tip \n VelocityInSoftwareDevelopment [ Areas…"}}],"outboundReferenceNotes":[{"title":"20200702125313-permutations-in-fp","slug":"20200702125313-permutations-in-fp","childMdx":{"excerpt":"This is quite a doozy, as I don't think there exists a way to do this arbitrarily in OOP/Imperative languages either, at least not easily…"}},{"title":"20200702124533-recursion-in-functional-programming","slug":"20200702124533-recursion-in-functional-programming","childMdx":{"excerpt":"This should come as no surprise at this point, but the recursive function is more of the less the 'loop' of the functional programming world…"}},{"title":"20200706092546-encapsulating-state-vs-fp","slug":"20200706092546-encapsulating-state-vs-fp","childMdx":{"excerpt":"Going through this data structures project and starting to realize one of the downsides of the C language. For efficient insertion in a…"}},{"title":"20200702124747-the-art-of-functional-programming","slug":"20200702124747-the-art-of-functional-programming","childMdx":{"excerpt":"I'm fairly certain that this doesn't exist yet, but it would be super cool if a book like this did exist. Basically a parallell to TAoCP…"}},{"title":"20200702125803-permutations-of-two-collections","slug":"20200702125803-permutations-of-two-collections","childMdx":{"excerpt":"Better write something here as a palceholder."}},{"title":"20200804131752-programming-languages-coursera","slug":"20200804131752-programming-languages-coursera","childMdx":{"excerpt":"So, I've just about finished up taking this Coursera course, and I have to get my thoughts down on just how amazing of an experience it's…"}},{"title":"20200730152314-plb-hw5-muplinterpreter","slug":"20200730152314-plb-hw5-muplinterpreter","childMdx":{"excerpt":"Okay, starting to work through this homework now. I'm still super unclear as to the actual details that I'll be faced with in the auto…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"20200619114230-functional-programming"}},"staticQueryHashes":[]}