{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/reinforcement-learning-for-design","result":{"data":{"brainNote":{"slug":"reinforcement-learning-for-design","title":"reinforcement-learning-for-design","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"reinforcement-learning-for-design\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A key idea that occurred to me last night was to use machine learning as a tool for producing optimal mechanical, electrical, and aerodynamic designs of things like rocket motors and race cars. It would be really cool if we could build a system that could understand geometric constraints, structural dynamics and vibrations, fluid dynamics, and combustion and power processes, but could also generatively iterate on these types of systems. Then, it would become the job of the engineer/designer not to generate these designs themselves, but to establish the constraints in a language the assistant could understand, and give feedback on the designs that are produced. Of course, I can see this sort of situation running into problems with things like manufacturability and assembly issues, but that could be part of the feedback loop from the designer/engineer.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"current-projects","slug":"current-projects","childMdx":{"excerpt":"Top of the Stack A Basic App to Get Started  (in mobile development) Self-Replicating Manufacturing in Space Reinforcement Learning for…"}},{"title":"getting-started-with-reinforcement-learning-pibox","slug":"getting-started-with-reinforcement-learning-pibox","childMdx":{"excerpt":"Reinforcement Learning for Design Following on to this idea, I came up with a great little scenario that will be simple enough to analyze…"}},{"title":"getting-started-with-reinforcement-learning-pibox","slug":"getting-started-with-reinforcement-learning","childMdx":{"excerpt":"Reinforcement Learning for Design Following on to this idea, I came up with a great little scenario that will be simple enough to analyze…"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"reinforcement-learning-for-design"}},"staticQueryHashes":[]}