{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\powershell-quirks","result":{"data":{"brainNote":{"slug":"powershell-quirks","title":"powershell-quirks","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"powershell-quirks\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today I learned a great deal of Powershell's quirks, although I'm sure that my learning in this department is far from over. One is that the hack $PSScriptRoot is a variable that contains the location of where the current script is stored on disk, NOT where you are currently running it from. So, you have a script s.ps1 in folder \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"home/user\"), \", cd into folder \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"home/user/stuff\"), \", run '../s.ps1', $PSScriptRoot will evaluate to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"home/user\"), \", rather than /home/user/stuff. If you want the latter, you have to run the Cmdlet Get-Location (which is aliased to pwd, btw, which I should have just tried in the first place). When in doubt, bash it out.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"windoze-index","slug":"windoze-index","childMdx":{"excerpt":"Azure \n Azure Functions \n DotNET and Java Enterprise Performance \n Powershell Quirks"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"powershell-quirks"}},"staticQueryHashes":[]}