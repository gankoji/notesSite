{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/android-app-development","result":{"data":{"brainNote":{"slug":"android-app-development","title":"android-app-development","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"After a good bit of research earlier this weekend, I found that there's really only three natively supported choices for app development on Android: Kotlin, Java, and C++. Of course, since Android runs the JVM, there are other non-Google supported language choices, like Clojure, and you can probably get just about any sort of development environment spun-up if you worked hard enough at it. These days, however, I'm more interested in getting shit done than I am in having the holiest of tech stacks. \"), mdx(\"p\", null, \"I spent some time last night reading through a rather large example app: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/google/iosched\"\n  }), \"Google IOSched\"), \". The app is written completely in Kotlin, which is sort of the 'new and fashionable' way to develop android apps, as I understand it. What I don't understand, is the code. It made absolutely no sense. I saw no code that actually \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"did\"), \" anything, only code that defined objects which were supposedly used elsewhere. Still a bit lost there, but I didn't deep dive the project, only gave it a cursory 30 minute-ish browsing. \"), mdx(\"p\", null, \"Going a little further, I discovered/remembered \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/flutter\"\n  }), \"Flutter\"), \", which supposedly lets you develop apps for desktop, mobile, and web all from a single codebase* TM. \"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[{"title":"flutter","slug":"flutter","childMdx":{"excerpt":"Flutter seems like a great place to start, if their marketing is to be believed. It seems a little too good to be true, and a little bitâ€¦"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"android-app-development"}},"staticQueryHashes":[]}