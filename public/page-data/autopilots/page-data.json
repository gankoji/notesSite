{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\autopilots","result":{"data":{"brainNote":{"slug":"autopilots","title":"autopilots","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The Boring Part of Space Robots\"), mdx(\"p\", null, \"Autopilots are necessary, but so boring to me these days. You can't get anything done if the autopilot isn't built and well tuned, though, so it has to happen. This is probably a great application for something like the SE(3) autopilot that Butcher and his cohort developed, although the guidance system for that autopilot left quite a bit to be desired. it's still a majorly difficult topic to consider \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cunder-actuated-control-for-guidance\"\n  }), \"Under Actuated Control for Guidance\"), \", since no good closed form solutions exists. Probably the best approximation is to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Coptimal-control\"\n  }), \"Optimal Control\"), \" to generate trajectories, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cbezier-curves\"\n  }), \"Bezier Curves\"), \" or similar to simplify the interpolation of those trajectories, and then a tracking autopilot like Rob's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cdirected-guidance\"\n  }), \"Directed Guidance\"), \" formulation. Super straightforward, the hard part is building the optimal control solver for \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Ctrajectory-generation\"\n  }), \"Trajectory Generation\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"what-makes-an-intelligent-swarm","slug":"what-makes-an-intelligent-swarm","childMdx":{"excerpt":"Decomposing the Problem Coming to the specific application of a massive swarm (let's say N=1e5 or 1e6 for this discussion) of robots, maybe…"}}],"outboundReferenceNotes":[{"title":"under-actuated-control-for-guidance","slug":"under-actuated-control-for-guidance","childMdx":{"excerpt":""}},{"title":"optimal-control","slug":"optimal-control","childMdx":{"excerpt":"Optimal control is a broad sub-field of control theory, which covers problems of the type \"given a system with specified dynamics…"}},{"title":"bezier-curves","slug":"bezier-curves","childMdx":{"excerpt":""}},{"title":"directed-guidance","slug":"directed-guidance","childMdx":{"excerpt":""}},{"title":"trajectory-generation","slug":"trajectory-generation","childMdx":{"excerpt":"The Hard Part of Huge Swarms Is generating trajectories for each vehicle to follow in near real time. The trouble is, the computational…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"autopilots"}},"staticQueryHashes":[]}