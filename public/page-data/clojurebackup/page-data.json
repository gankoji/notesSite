{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/\\clojurebackup","result":{"data":{"brainNote":{"slug":"clojurebackup","title":"clojurebackup","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Moving the Script to Clojure\"), mdx(\"p\", null, \"Why? Well, frankly, because I can and I want to. We have a working-ish python version that's single threaded, incredibly network bound, and sort of brittle. While I don't expect the Clojure version to magically fix any of those items, I do want to move it there because it will be a good learning experience. Also, I think the functional nature of Clojure will help in forcing my hand, toward making the software a little more extensible, flexible, and small. \"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Ccatching-up-to-the-python-version\"\n  }), \"Catching Up to the Python Version\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%5Cmaking-architectural-decisions\"\n  }), \"Making Architectural Decisions\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"accomplishments","slug":"accomplishments","childMdx":{"excerpt":"2020: PiSort DataStructures Submission reviewer/referee? for the Journal of Algorithms and Computational Technology.  Hackintosh was a thing…"}},{"title":"archived-schtuff","slug":"archived-schtuff","childMdx":{"excerpt":"This is the Boneyard Finishing PiSort \n The Notes Site Lives \n 202008161707 Emacs Lisp Project \n Data Structures \n Managing All My Disks…"}},{"title":"managing-all-my-disks","slug":"managing-all-my-disks","childMdx":{"excerpt":"Too Many Disks! This is a constant problem for me, although it's not a bad one to have. The issue is that I have so many disks lying around…"}},{"title":"the-homebackup-project","slug":"the-homebackup-project","childMdx":{"excerpt":"Backing Up Critical Data This is an offshoot of my  The Personal DataVault  project, really a first 'research-ish' step along the way to…"}},{"title":"the-stewart-platform-project","slug":"the-stewart-platform-project","childMdx":{"excerpt":"Going back to my roots Struggled a bit this week (20201231, end of 2020!) to come up with a new project, since  The HomeBackup Project  and…"}}],"outboundReferenceNotes":[{"title":"catching-up-to-the-python-version","slug":"catching-up-to-the-python-version","childMdx":{"excerpt":"Creating the TODO list Let's make this as simple as possible, by starting small and working our way up.  First, the code plan: DONE Function…"}},{"title":"making-architectural-decisions","slug":"making-architectural-decisions","childMdx":{"excerpt":"The HomeBackup Project Next, the architecture plan: Think through  Clojure Deployment . Figure out a convenient way to get this code up and…"}}]},"site":{"siteMetadata":{"title":"Jake's Notes"}}},"pageContext":{"slug":"clojurebackup"}},"staticQueryHashes":[]}